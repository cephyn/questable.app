rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Quest cards collection - allow public read access with optimized filter support
    match /questCards/{document=**} {
      // Allow read access without authentication, including filtered queries
      allow read: if true;
      
      // Allow write operations only for authenticated users
      allow create: if request.auth != null;
      
      // Allow update and delete only for the creator or admins
      allow update, delete: if request.auth != null && 
        (resource.data.uploadedBy == request.auth.uid || 
         exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']));
    }
    
    // Game Systems collection - standardized game system definitions
    match /game_systems/{systemId} {
      // Allow read access to everyone to support filtering and display
      allow read: if true;
      
      // Only admins can create, update, or delete game systems
      allow create, update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }
    
    // Migration logs collection - for tracking standardization operations
    match /migration_logs/{logId} {
      // Only admin users can read and write migration logs
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }
    
    // Filter options collection - allow public read access for filter values
    match /filterOptions/{optionType} {
      allow read: if true;
      allow write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }
    
    // User filter preferences - allow users to save their filter preferences
    match /users/{userId}/filterPreferences/{filterType} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Saved filters - allow users to manage their saved filters
    match /users/{userId}/saved_filters/{filterName} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Users collection - requires authentication for all operations
    match /users/{userId} {
      // Only allow access to the user's own document
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow admins to access any user document
      allow read, write: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }
    
    // Migration Metrics collection - for tracking standardization analytics
    match /migration_metrics/{metricId} {
      // Only admin users can read and write migration metrics
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
    }

    // Default rule - deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}